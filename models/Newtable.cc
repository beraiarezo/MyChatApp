/**
 *
 *  Newtable.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Newtable.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::chat;

const std::string Newtable::Cols::_column1 = "column1";
const std::string Newtable::Cols::_column2 = "column2";
const std::string Newtable::Cols::_column3 = "column3";
const std::string Newtable::primaryKeyName = "";
const bool Newtable::hasPrimaryKey = false;
const std::string Newtable::tableName = "newtable";

const std::vector<typename Newtable::MetaData> Newtable::metaData_={
{"column1","std::string","character varying",0,0,0,0},
{"column2","std::string","character varying",0,0,0,0},
{"column3","std::string","character varying",0,0,0,0}
};
const std::string &Newtable::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Newtable::Newtable(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["column1"].isNull())
        {
            column1_=std::make_shared<std::string>(r["column1"].as<std::string>());
        }
        if(!r["column2"].isNull())
        {
            column2_=std::make_shared<std::string>(r["column2"].as<std::string>());
        }
        if(!r["column3"].isNull())
        {
            column3_=std::make_shared<std::string>(r["column3"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            column1_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            column2_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            column3_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Newtable::Newtable(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            column1_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            column2_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            column3_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

Newtable::Newtable(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("column1"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["column1"].isNull())
        {
            column1_=std::make_shared<std::string>(pJson["column1"].asString());
        }
    }
    if(pJson.isMember("column2"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["column2"].isNull())
        {
            column2_=std::make_shared<std::string>(pJson["column2"].asString());
        }
    }
    if(pJson.isMember("column3"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["column3"].isNull())
        {
            column3_=std::make_shared<std::string>(pJson["column3"].asString());
        }
    }
}

void Newtable::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            column1_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            column2_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            column3_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
}

void Newtable::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("column1"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["column1"].isNull())
        {
            column1_=std::make_shared<std::string>(pJson["column1"].asString());
        }
    }
    if(pJson.isMember("column2"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["column2"].isNull())
        {
            column2_=std::make_shared<std::string>(pJson["column2"].asString());
        }
    }
    if(pJson.isMember("column3"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["column3"].isNull())
        {
            column3_=std::make_shared<std::string>(pJson["column3"].asString());
        }
    }
}

const std::string &Newtable::getValueOfColumn1() const noexcept
{
    static const std::string defaultValue = std::string();
    if(column1_)
        return *column1_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Newtable::getColumn1() const noexcept
{
    return column1_;
}
void Newtable::setColumn1(const std::string &pColumn1) noexcept
{
    column1_ = std::make_shared<std::string>(pColumn1);
    dirtyFlag_[0] = true;
}
void Newtable::setColumn1(std::string &&pColumn1) noexcept
{
    column1_ = std::make_shared<std::string>(std::move(pColumn1));
    dirtyFlag_[0] = true;
}
void Newtable::setColumn1ToNull() noexcept
{
    column1_.reset();
    dirtyFlag_[0] = true;
}

const std::string &Newtable::getValueOfColumn2() const noexcept
{
    static const std::string defaultValue = std::string();
    if(column2_)
        return *column2_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Newtable::getColumn2() const noexcept
{
    return column2_;
}
void Newtable::setColumn2(const std::string &pColumn2) noexcept
{
    column2_ = std::make_shared<std::string>(pColumn2);
    dirtyFlag_[1] = true;
}
void Newtable::setColumn2(std::string &&pColumn2) noexcept
{
    column2_ = std::make_shared<std::string>(std::move(pColumn2));
    dirtyFlag_[1] = true;
}
void Newtable::setColumn2ToNull() noexcept
{
    column2_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Newtable::getValueOfColumn3() const noexcept
{
    static const std::string defaultValue = std::string();
    if(column3_)
        return *column3_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Newtable::getColumn3() const noexcept
{
    return column3_;
}
void Newtable::setColumn3(const std::string &pColumn3) noexcept
{
    column3_ = std::make_shared<std::string>(pColumn3);
    dirtyFlag_[2] = true;
}
void Newtable::setColumn3(std::string &&pColumn3) noexcept
{
    column3_ = std::make_shared<std::string>(std::move(pColumn3));
    dirtyFlag_[2] = true;
}
void Newtable::setColumn3ToNull() noexcept
{
    column3_.reset();
    dirtyFlag_[2] = true;
}

void Newtable::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Newtable::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "column1",
        "column2",
        "column3"
    };
    return inCols;
}

void Newtable::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getColumn1())
        {
            binder << getValueOfColumn1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getColumn2())
        {
            binder << getValueOfColumn2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getColumn3())
        {
            binder << getValueOfColumn3();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Newtable::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void Newtable::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getColumn1())
        {
            binder << getValueOfColumn1();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getColumn2())
        {
            binder << getValueOfColumn2();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getColumn3())
        {
            binder << getValueOfColumn3();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Newtable::toJson() const
{
    Json::Value ret;
    if(getColumn1())
    {
        ret["column1"]=getValueOfColumn1();
    }
    else
    {
        ret["column1"]=Json::Value();
    }
    if(getColumn2())
    {
        ret["column2"]=getValueOfColumn2();
    }
    else
    {
        ret["column2"]=Json::Value();
    }
    if(getColumn3())
    {
        ret["column3"]=getValueOfColumn3();
    }
    else
    {
        ret["column3"]=Json::Value();
    }
    return ret;
}

Json::Value Newtable::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getColumn1())
            {
                ret[pMasqueradingVector[0]]=getValueOfColumn1();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getColumn2())
            {
                ret[pMasqueradingVector[1]]=getValueOfColumn2();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getColumn3())
            {
                ret[pMasqueradingVector[2]]=getValueOfColumn3();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getColumn1())
    {
        ret["column1"]=getValueOfColumn1();
    }
    else
    {
        ret["column1"]=Json::Value();
    }
    if(getColumn2())
    {
        ret["column2"]=getValueOfColumn2();
    }
    else
    {
        ret["column2"]=Json::Value();
    }
    if(getColumn3())
    {
        ret["column3"]=getValueOfColumn3();
    }
    else
    {
        ret["column3"]=Json::Value();
    }
    return ret;
}

bool Newtable::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("column1"))
    {
        if(!validJsonOfField(0, "column1", pJson["column1"], err, true))
            return false;
    }
    if(pJson.isMember("column2"))
    {
        if(!validJsonOfField(1, "column2", pJson["column2"], err, true))
            return false;
    }
    if(pJson.isMember("column3"))
    {
        if(!validJsonOfField(2, "column3", pJson["column3"], err, true))
            return false;
    }
    return true;
}
bool Newtable::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Newtable::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("column1"))
    {
        if(!validJsonOfField(0, "column1", pJson["column1"], err, false))
            return false;
    }
    if(pJson.isMember("column2"))
    {
        if(!validJsonOfField(1, "column2", pJson["column2"], err, false))
            return false;
    }
    if(pJson.isMember("column3"))
    {
        if(!validJsonOfField(2, "column3", pJson["column3"], err, false))
            return false;
    }
    return true;
}
bool Newtable::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Newtable::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
