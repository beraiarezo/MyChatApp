/**
 *
 *  ConversationMessages.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "ConversationMessages.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::chat;

const std::string ConversationMessages::Cols::_conversation_id = "conversation_id";
const std::string ConversationMessages::Cols::_message_id = "message_id";
const std::vector<std::string> ConversationMessages::primaryKeyName = {"conversation_id","message_id"};
const bool ConversationMessages::hasPrimaryKey = true;
const std::string ConversationMessages::tableName = "conversation_messages";

const std::vector<typename ConversationMessages::MetaData> ConversationMessages::metaData_={
{"conversation_id","std::string","uuid",0,0,1,1},
{"message_id","std::string","uuid",0,0,1,1}
};
const std::string &ConversationMessages::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
ConversationMessages::ConversationMessages(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["conversation_id"].isNull())
        {
            conversationId_=std::make_shared<std::string>(r["conversation_id"].as<std::string>());
        }
        if(!r["message_id"].isNull())
        {
            messageId_=std::make_shared<std::string>(r["message_id"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 2 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            conversationId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            messageId_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

ConversationMessages::ConversationMessages(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            conversationId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            messageId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

ConversationMessages::ConversationMessages(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("conversation_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["conversation_id"].isNull())
        {
            conversationId_=std::make_shared<std::string>(pJson["conversation_id"].asString());
        }
    }
    if(pJson.isMember("message_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["message_id"].isNull())
        {
            messageId_=std::make_shared<std::string>(pJson["message_id"].asString());
        }
    }
}

void ConversationMessages::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 2)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            conversationId_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            messageId_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
}

void ConversationMessages::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("conversation_id"))
    {
        if(!pJson["conversation_id"].isNull())
        {
            conversationId_=std::make_shared<std::string>(pJson["conversation_id"].asString());
        }
    }
    if(pJson.isMember("message_id"))
    {
        if(!pJson["message_id"].isNull())
        {
            messageId_=std::make_shared<std::string>(pJson["message_id"].asString());
        }
    }
}

const std::string &ConversationMessages::getValueOfConversationId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(conversationId_)
        return *conversationId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ConversationMessages::getConversationId() const noexcept
{
    return conversationId_;
}
void ConversationMessages::setConversationId(const std::string &pConversationId) noexcept
{
    conversationId_ = std::make_shared<std::string>(pConversationId);
    dirtyFlag_[0] = true;
}
void ConversationMessages::setConversationId(std::string &&pConversationId) noexcept
{
    conversationId_ = std::make_shared<std::string>(std::move(pConversationId));
    dirtyFlag_[0] = true;
}

const std::string &ConversationMessages::getValueOfMessageId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(messageId_)
        return *messageId_;
    return defaultValue;
}
const std::shared_ptr<std::string> &ConversationMessages::getMessageId() const noexcept
{
    return messageId_;
}
void ConversationMessages::setMessageId(const std::string &pMessageId) noexcept
{
    messageId_ = std::make_shared<std::string>(pMessageId);
    dirtyFlag_[1] = true;
}
void ConversationMessages::setMessageId(std::string &&pMessageId) noexcept
{
    messageId_ = std::make_shared<std::string>(std::move(pMessageId));
    dirtyFlag_[1] = true;
}

void ConversationMessages::updateId(const uint64_t id)
{
}
typename ConversationMessages::PrimaryKeyType ConversationMessages::getPrimaryKey() const
{
    return std::make_tuple(*conversationId_,*messageId_);
}

const std::vector<std::string> &ConversationMessages::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "conversation_id",
        "message_id"
    };
    return inCols;
}

void ConversationMessages::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getConversationId())
        {
            binder << getValueOfConversationId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getMessageId())
        {
            binder << getValueOfMessageId();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> ConversationMessages::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    return ret;
}

void ConversationMessages::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getConversationId())
        {
            binder << getValueOfConversationId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getMessageId())
        {
            binder << getValueOfMessageId();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value ConversationMessages::toJson() const
{
    Json::Value ret;
    if(getConversationId())
    {
        ret["conversation_id"]=getValueOfConversationId();
    }
    else
    {
        ret["conversation_id"]=Json::Value();
    }
    if(getMessageId())
    {
        ret["message_id"]=getValueOfMessageId();
    }
    else
    {
        ret["message_id"]=Json::Value();
    }
    return ret;
}

Json::Value ConversationMessages::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 2)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getConversationId())
            {
                ret[pMasqueradingVector[0]]=getValueOfConversationId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getMessageId())
            {
                ret[pMasqueradingVector[1]]=getValueOfMessageId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getConversationId())
    {
        ret["conversation_id"]=getValueOfConversationId();
    }
    else
    {
        ret["conversation_id"]=Json::Value();
    }
    if(getMessageId())
    {
        ret["message_id"]=getValueOfMessageId();
    }
    else
    {
        ret["message_id"]=Json::Value();
    }
    return ret;
}

bool ConversationMessages::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("conversation_id"))
    {
        if(!validJsonOfField(0, "conversation_id", pJson["conversation_id"], err, true))
            return false;
    }
    else
    {
        err="The conversation_id column cannot be null";
        return false;
    }
    if(pJson.isMember("message_id"))
    {
        if(!validJsonOfField(1, "message_id", pJson["message_id"], err, true))
            return false;
    }
    else
    {
        err="The message_id column cannot be null";
        return false;
    }
    return true;
}
bool ConversationMessages::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                              const std::vector<std::string> &pMasqueradingVector,
                                                              std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ConversationMessages::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("conversation_id"))
    {
        if(!validJsonOfField(0, "conversation_id", pJson["conversation_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("message_id"))
    {
        if(!validJsonOfField(1, "message_id", pJson["message_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    return true;
}
bool ConversationMessages::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                            const std::vector<std::string> &pMasqueradingVector,
                                                            std::string &err)
{
    if(pMasqueradingVector.size() != 2)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool ConversationMessages::validJsonOfField(size_t index,
                                            const std::string &fieldName,
                                            const Json::Value &pJson,
                                            std::string &err,
                                            bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
